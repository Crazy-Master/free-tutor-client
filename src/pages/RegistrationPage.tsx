import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../store/auth";
import { useUser } from "../store/user";
import { useDisciplineStore } from "../store/disciplineStore";
import { dictionaryService } from "../services/dictionaryService";

import Card from "../components/ui/Card";
import Button from "../components/ui/Button";
import ErrorBox from "../components/ui/ErrorBox";

interface DisciplineDto {
  disciplineId: number;
  discipline: string;
  typeExam: string;
}

const RegistrationPage = () => {
  const navigate = useNavigate();
  const { login: saveToken } = useAuth();
  const { setUser } = useUser();
  const { setDisciplineId } = useDisciplineStore();

  const [login, setLogin] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [role, setRole] = useState("");
  const [disciplineId, setDisciplineIdLocal] = useState<number | null>(null);
  const [disciplines, setDisciplines] = useState<DisciplineDto[]>([]);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const isPasswordValid = /^(?=.*[A-Z])(?=.*\d).{6,}$/.test(password);
  const isPasswordMatch = password === confirmPassword;

  useEffect(() => {
    const fetchDisciplines = async () => {
      try {
        const response = await fetch("https://api-tutor-master.ru/api/disciplines");
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω");
        const data = await response.json();
        setDisciplines(data);
      } catch (err) {
        console.error(err);
      }
    };

    fetchDisciplines();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (!isPasswordValid) {
      setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.");
      return;
    }

    if (!isPasswordMatch) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      return;
    }

    try {
      setLoading(true);

      const information = {
        lastDisciplineId: role === "teacher" && disciplineId ? disciplineId : 0,
        studentIds: [],
        notes: {},
      };

      const response = await fetch("https://api-tutor-master.ru/api/users/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          login,
          email,
          password,
          role: role === "student" ? 0 : 1,
          information,
        }),
      });

      if (!response.ok) {
        let errorMsg = "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.";
        try {
          const data = await response.json();
          if (data?.message) errorMsg = data.message;
        } catch {}
        setError(errorMsg);
        return;
      }

      const data = await response.json();
      saveToken(data.tokenString);
      setUser(data.userAuthDto);

      const lastId = data.userAuthDto.information?.lastDisciplineId;
      if (lastId) {
        setDisciplineId(lastId);
        dictionaryService.reset();
      }

      const payload = JSON.parse(atob(data.tokenString.split(".")[1]));
      const userRole = payload.role;

      if (userRole === "student") {
        navigate("/student");
      } else if (userRole === "teacher") {
        navigate("/teacher");
      } else if (userRole === "admin") {
        navigate("/admin");
      } else {
        navigate("/");
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É." + err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background text-text flex justify-center items-center px-4">
      <Card className="w-full max-w-lg relative">
        <button
          className="absolute top-4 left-4 text-sm text-primary underline"
          onClick={() => navigate("/")}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>

        <h2 className="text-2xl font-bold mb-6 text-center">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>

        <form onSubmit={handleSubmit} className="space-y-4 mt-6">
          <div>
            <label className="block mb-1">–õ–æ–≥–∏–Ω</label>
            <input
              type="text"
              placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω"
              className="w-full border rounded px-3 py-2"
              value={login}
              onChange={(e) => setLogin(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="block mb-1">Email</label>
            <input
              type="email"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É"
              className="w-full border rounded px-3 py-2"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="block mb-1">–ü–∞—Ä–æ–ª—å</label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
                className="w-full border rounded px-3 py-2 pr-10"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <span
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer text-sm text-gray-500"
              >
                {showPassword ? "üôà" : "üëÅÔ∏è"}
              </span>
            </div>
            {!isPasswordValid && password && (
              <p className="text-xs text-red-500 mt-1">
                –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏ —Ü–∏—Ñ—Ä–∞
              </p>
            )}
          </div>

          <div>
            <label className="block mb-1">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"
                className="w-full border rounded px-3 py-2 pr-10"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
              <span
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer text-sm text-gray-500"
              >
                {showPassword ? "üôà" : "üëÅÔ∏è"}
              </span>
            </div>
            {confirmPassword && !isPasswordMatch && (
              <p className="text-xs text-red-500 mt-1">–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç</p>
            )}
          </div>

          <div>
            <label className="block mb-1">–†–æ–ª—å</label>
            <select
              className="w-full border rounded px-3 py-2"
              value={role}
              onChange={(e) => {
                setRole(e.target.value);
                setDisciplineIdLocal(null);
              }}
              required
            >
              <option value="" disabled>
                –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å
              </option>
              <option value="student">–°—Ç—É–¥–µ–Ω—Ç</option>
              <option value="teacher">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</option>
            </select>
          </div>

          {role === "teacher" && (
            <div>
              <label className="block mb-1">–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</label>
              <select
                className="w-full border rounded px-3 py-2"
                value={disciplineId ?? ""}
                onChange={(e) => setDisciplineIdLocal(Number(e.target.value))}
                required
              >
                <option value="" disabled>
                  –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
                </option>
                {disciplines.map((d) => (
                  <option key={d.disciplineId} value={d.disciplineId}>
                    {d.typeExam} - {d.discipline}
                  </option>
                ))}
              </select>
            </div>
          )}

          {error && <ErrorBox message={error} />}

          <Button type="submit" className="w-full" disabled={loading}>
            {loading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
          </Button>
        </form>
      </Card>
    </div>
  );
};

export default RegistrationPage;
